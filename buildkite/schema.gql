"""An agent"""
type Agent implements Node {
  """The time when the agent connected to Buildkite"""
  connectedAt: DateTime

  """The connection state of the agent"""
  connectionState: String!

  """The date the agent was created"""
  createdAt: DateTime

  """The time when the agent disconnected from Buildkite"""
  disconnectedAt: DateTime

  """
  The last time the agent performend a `heartbeat` operation to the Agent API
  """
  heartbeatAt: DateTime

  """The hostname of the machine running the agent"""
  hostname: String
  id: ID!

  """The IP address that the agent has connected from"""
  ipAddress: String

  """If this version of agent has been deprecated by Buildkite"""
  isDeprecated: Boolean!

  """
  Returns whether or not this agent is running a job. If isRunningJob true, but
  the `job` field is empty, the current user doesn't have access to view the job
  """
  isRunningJob: Boolean!

  """The currently running job"""
  job: Job

  """Jobs that have been assigned to this agent"""
  jobs(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Order the jobs"""
    order: JobOrder = RECENTLY_ASSIGNED
  ): JobConnection

  """
  The date the agent was lost from Buildkite if it didn't cleanly disconnect
  """
  lostAt: DateTime

  """The meta data this agent was stared with"""
  metaData: [String!]

  """The name of the agent"""
  name: String

  """The operating system the agent is running on"""
  operatingSystem: OperatingSystem
  organization: Organization
  permissions: AgentPermissions

  """The process identifier (PID) of the agent process on the machine"""
  pid: String
  pingedAt: DateTime @deprecated(reason: "DEPRECATED: please use heartbeatAt")

  """The priority setting for the agent"""
  priority: Int

  """
  Whether this agent is visible to everyone, including people outside this organization
  """
  public: Boolean!

  """The time this agent was forced to stop"""
  stopForcedAt: DateTime

  """The user that forced this agent to stop"""
  stopForcedBy: User

  """The time the agent was first asked to stop"""
  stoppedAt: DateTime @deprecated(reason: "Use either `stoppedGracefullyAt` or `stopForcedAt`")

  """The user that initially stopped this agent"""
  stoppedBy: User @deprecated(reason: "Use either `stoppedGracefullyBy` or `stopForcedBy`")

  """The time the agent was gracefully stopped by a user"""
  stoppedGracefullyAt: DateTime

  """The user that gracefully stopped this agent"""
  stoppedGracefullyBy: User

  """
  The User-Agent of the program that is making Agent API requests to Buildkite
  """
  userAgent: String

  """The public UUID for the agent"""
  uuid: ID!

  """The version of the agent"""
  version: String
}

type AgentConnection implements Connection {
  count: Int!
  edges: [AgentEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of AgentDelete"""
input AgentDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of AgentDelete"""
type AgentDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedAgentID: ID!
  organization: Organization!
}

type AgentEdge {
  cursor: String!
  node: Agent
}

"""
Permissions information about what actions the current user can do against this agent
"""
type AgentPermissions {
  """
  Whether the user can manually delete this agent (only available to legacy agents)
  """
  agentDelete: Permission

  """Whether the user can stop the agent remotely"""
  agentStop: Permission
}

"""Autogenerated input type of AgentStop"""
input AgentStopInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!

  """If this agent should finish the current job before stopping"""
  graceful: Boolean = true
}

"""Autogenerated return type of AgentStop"""
type AgentStopPayload {
  agent: Agent!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""A token used to connect an agent to Buildkite"""
type AgentToken implements Node {
  """The time this agent token was created"""
  createdAt: DateTime

  """The user that created this agent token"""
  createdBy: User

  """A description about what this agent token is used for"""
  description: String
  id: ID!
  organization: Organization
  permissions: AgentTokenPermissions

  """
  Whether agents registered with this token will be visible to everyone, including people outside this organization
  """
  public: Boolean!

  """The time this agent token was revoked"""
  revokedAt: DateTime

  """The user that revoked this agent token"""
  revokedBy: User

  """The reason as defined by the user why this token was revoked"""
  revokedReason: String

  """The name of the agent"""
  token: String!

  """The public UUID for the agent"""
  uuid: ID!
}

type AgentTokenConnection implements Connection {
  count: Int!
  edges: [AgentTokenEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of AgentTokenCreate"""
input AgentTokenCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationID: ID!
  description: String
  public: Boolean = false
}

"""Autogenerated return type of AgentTokenCreate"""
type AgentTokenCreatePayload {
  agentTokenEdge: AgentTokenEdge!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organization: Organization!
}

type AgentTokenEdge {
  cursor: String!
  node: AgentToken
}

"""
Permissions information about what actions the current user can do against the agent token
"""
type AgentTokenPermissions {
  """Whether the user can revoke this agent token"""
  agentTokenRevoke: Permission
}

"""Autogenerated input type of AgentTokenRevoke"""
input AgentTokenRevokeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!

  """The reason why this agent token should be revoked"""
  reason: String!
}

"""Autogenerated return type of AgentTokenRevoke"""
type AgentTokenRevokePayload {
  agentToken: AgentToken!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""
An annotation allows you to add arbitary content to the top of a build page in the Buildkite UI
"""
type Annotation implements Node {
  """The body of the annotation"""
  body: AnnotationBody

  """
  The context of the annotation that helps you differentiate this one from others
  """
  context: String!

  """The date the annotation was created"""
  createdAt: DateTime!
  id: ID!

  """The visual style of the annotation"""
  style: AnnotationStyle

  """The last time the annotation was changed"""
  updatedAt: DateTime

  """The public UUID for this annotation"""
  uuid: ID!
}

"""A body of an annotation"""
type AnnotationBody {
  """
  The body of the annotation rendered as HTML. The renderer result could be an
  empty string if the textual version has unsupported HTML tags
  """
  html: String

  """The body of the annotation as text"""
  text: String!
}

type AnnotationConnection implements Connection {
  count: Int!
  edges: [AnnotationEdge]
  pageInfo: PageInfo
}

type AnnotationEdge {
  cursor: String!
  node: Annotation
}

"""The visual style of the annoation"""
enum AnnotationStyle {
  """The default styling of an annotation"""
  DEFAULT

  """The annotation has a green border with a tick next to it"""
  SUCCESS

  """The annotation has a blue border with an information icon next to it"""
  INFO

  """The annotation has an orange border with a warning icon next to it"""
  WARNING

  """ The annotation has a red border with a cross next to it"""
  ERROR
}

"""API access tokens for authentication with the Buildkite API"""
type APIAccessToken implements Node {
  """The time when this access token was last used"""
  accessedAt: DateTime
  application: APIApplication

  """The time when this access token was created"""
  createdAt: DateTime!

  """Description of the purpose of the API access token"""
  description: String
  id: ID!

  """The IP Address used when the token was last used"""
  ipAddress: String

  """The template the access token is based on"""
  template: APIAccessTokenTemplates

  """The access token"""
  token: String!

  """The user agent used when the token was last used"""
  userAgent: String

  """The public UUID for the API Access Token"""
  uuid: ID!
}

"""
A code that is used by an API Application to request an API Access Token
"""
type APIAccessTokenCode implements Node {
  application: APIApplication

  """The time when this code was authorized by a user"""
  authorizedAt: DateTime

  """The IP address of the client that authorized this code"""
  authorizedIPAddress: String

  """The actual code used to find this API Access Token Code record"""
  code: String!

  """The description of the code provided by the API Application"""
  description: String!

  """The time when this code will expire"""
  expiresAt: DateTime!
  id: ID!
}

"""Autogenerated input type of APIAccessTokenCodeAuthorizeMutation"""
input APIAccessTokenCodeAuthorizeMutationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of APIAccessTokenCodeAuthorizeMutation"""
type APIAccessTokenCodeAuthorizeMutationPayload {
  apiAccessTokenCode: APIAccessTokenCode!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

type APIAccessTokenConnection implements Connection {
  count: Int!
  edges: [APIAccessTokenEdge]
  pageInfo: PageInfo
}

type APIAccessTokenEdge {
  cursor: String!
  node: APIAccessToken
}

"""Templates an API Access Token can be based on"""
enum APIAccessTokenTemplates {
  """API Access Token for AWS Elastic CI"""
  ELASTIC_CI_AWS
}

"""An API Application"""
type APIApplication implements Node {
  """A description of the application"""
  description: String!
  id: ID!

  """The name of this application"""
  name: String!
}

"""A file uploaded from the agent whilst running a job"""
type Artifact implements Node {
  """
  The download URL for the artifact. Unless you've used your own artifact
  storage, the URL will be valid for only 10 minutes.
  """
  downloadURL: String!
  id: ID!

  """The job that uploaded this artifact"""
  job: JobTypeCommand

  """The mime type of the file provided by the agent"""
  mimeType: String!

  """The path of the uploaded artifact"""
  path: String!

  """A SHA1SUM of the file"""
  sha1sum: String!

  """The size of the file in bytes that was uploaded"""
  size: Int!

  """The upload state of the artifact"""
  state: String!

  """The public UUID for this artifact"""
  uuid: ID!
}

type ArtifactConnection implements Connection {
  count: Int!
  edges: [ArtifactEdge]
  pageInfo: PageInfo
}

type ArtifactEdge {
  cursor: String!
  node: Artifact
}

"""The actor who caused an AuditEvent"""
type AuditActor {
  """The GraphQL ID for this actor"""
  id: ID!

  """The name or short description of this actor"""
  name: String

  """The node corresponding to this actor, if available"""
  node: AuditActorNode

  """The type of this actor"""
  type: AuditActorType

  """The public UUID of this actor"""
  uuid: ID!
}

"""Kinds of actors which can perform audit events"""
union AuditActorNode = User

"""All the possible types of actors in an Audit Event"""
enum AuditActorType {
  USER
}

"""Context for an audit event created during an REST/GraphQL API request"""
type AuditAPIContext {
  """The remote IP which made the request"""
  requestIpAddress: String

  """The client supplied user agent which made the request"""
  requestUserAgent: String
}

"""Kinds of contexts in which an audit event can be performed"""
union AuditContext = AuditWebContext | AuditAPIContext

"""Audit record of an event which occurred in the system"""
type AuditEvent implements Node {
  """The actor who caused this event"""
  actor: AuditActor

  """The context in which this event occurred"""
  context: AuditContext

  """The changed data in the event"""
  data: JSON
  id: ID!

  """The time at which this event occurred"""
  occurredAt: DateTime!

  """The subject of this event"""
  subject: AuditSubject

  """The type of event"""
  type: AuditEventType!

  """The public UUID for the event"""
  uuid: ID!
}

"""All the possible types of an Audit Event"""
enum AuditEventType {
  AGENT_TOKEN_CREATED
  AGENT_TOKEN_REVOKED
  NOTIFICATION_SERVICE_BROKEN
  NOTIFICATION_SERVICE_CREATED
  NOTIFICATION_SERVICE_DELETED
  NOTIFICATION_SERVICE_DISABLED
  NOTIFICATION_SERVICE_ENABLED
  NOTIFICATION_SERVICE_UPDATED
  ORGANIZATION_CREATED
  ORGANIZATION_DELETED
  ORGANIZATION_INVITATION_ACCEPTED
  ORGANIZATION_INVITATION_CREATED
  ORGANIZATION_INVITATION_RESENT
  ORGANIZATION_INVITATION_REVOKED
  ORGANIZATION_MEMBER_CREATED
  ORGANIZATION_MEMBER_DELETED
  ORGANIZATION_MEMBER_UPDATED
  ORGANIZATION_TEAMS_DISABLED
  ORGANIZATION_TEAMS_ENABLED
  ORGANIZATION_UPDATED
  PIPELINE_CREATED
  PIPELINE_DELETED
  PIPELINE_SCHEDULE_CREATED
  PIPELINE_SCHEDULE_DELETED
  PIPELINE_SCHEDULE_UPDATED
  PIPELINE_UPDATED
  PIPELINE_VISIBILITY_CHANGED
  PORTAL_CREATED
  PORTAL_DELETED
  PORTAL_ENDPOINT_CREATED
  PORTAL_ENDPOINT_DELETED
  PORTAL_ENDPOINT_UPDATED
  PORTAL_UPDATED
  SCM_PIPELINE_SETTINGS_CREATED
  SCM_PIPELINE_SETTINGS_DELETED
  SCM_PIPELINE_SETTINGS_UPDATED
  SCM_SERVICE_CREATED
  SCM_SERVICE_DELETED
  SCM_SERVICE_UPDATED
  SSO_PROVIDER_CREATED
  SSO_PROVIDER_DELETED
  SSO_PROVIDER_DISABLED
  SSO_PROVIDER_ENABLED
  SSO_PROVIDER_UPDATED
  TEAM_CREATED
  TEAM_DELETED
  TEAM_MEMBER_CREATED
  TEAM_MEMBER_DELETED
  TEAM_MEMBER_UPDATED
  TEAM_PIPELINE_CREATED
  TEAM_PIPELINE_DELETED
  TEAM_PIPELINE_UPDATED
  TEAM_UPDATED
}

"""The subject of an AuditEvent"""
type AuditSubject {
  """The GraphQL ID for the subject"""
  id: ID!

  """The name or short description of this subject"""
  name: String

  """The node corresponding to the subject, if available"""
  node: AuditSubjectNode

  """The type of this subject"""
  type: AuditSubjectType

  """The public UUID of this subject"""
  uuid: ID!
}

"""Kinds of subjects which can have audit events performed on them"""
union AuditSubjectNode = AgentToken | NotificationServiceCampfire | NotificationServiceFlowdock | NotificationServiceHipchat | NotificationServiceSlack | NotificationServiceWebhook | Organization | OrganizationInvitation | OrganizationMember | Pipeline | PipelineSchedule | Team | TeamMember | TeamPipeline | SCMService | SCMPipelineSettings | Portal | PortalEndpoint | SSOProviderGoogleGSuite | SSOProviderGitHubApp | SSOProviderSAML

"""All the possible types of subjects in an Audit Event"""
enum AuditSubjectType {
  AGENT_TOKEN
  NOTIFICATION_SERVICE
  ORGANIZATION
  ORGANIZATION_INVITATION
  ORGANIZATION_MEMBER
  PIPELINE
  PIPELINE_SCHEDULE
  TEAM
  TEAM_MEMBER
  TEAM_PIPELINE
  SCM_SERVICE
  SCM_PIPELINE_SETTINGS
  PORTAL
  PORTAL_ENDPOINT
  SSO_PROVIDER
}

"""Context for an audit event created during a web request"""
type AuditWebContext {
  """The remote IP which made the request"""
  requestIpAddress: String

  """The client supplied user agent which made the request"""
  requestUserAgent: String

  """When the session started, if available"""
  sessionCreatedAt: DateTime

  """When the session was escalated, if available and escalated"""
  sessionEscalatedAt: DateTime

  """The session's authenticated user, if available"""
  sessionUser: User

  """The session's authenticated user's uuid"""
  sessionUserUuid: ID
}

interface Authorization {
  id: ID!
}

"""A Bitbucket account authorized with a Buildkite account"""
type AuthorizationBitbucket implements Authorization & Node {
  id: ID!
}

type AuthorizationConnection implements Connection {
  count: Int!
  edges: [AuthorizationEdge]
  pageInfo: PageInfo
}

type AuthorizationEdge {
  cursor: String!
  node: Authorization
}

"""A GitHub account authorized with a Buildkite account"""
type AuthorizationGitHub implements Authorization & Node {
  id: ID!
}

"""A GitHub Enterprise account authorized with a Buildkite account"""
type AuthorizationGitHubEnterprise implements Authorization & Node {
  id: ID!
}

"""A Google account authorized with a Buildkite account"""
type AuthorizationGoogle implements Authorization & Node {
  id: ID!
}

"""A SAML account authorized with a Buildkite account"""
type AuthorizationSAML implements Authorization & Node {
  id: ID!
}

"""The type of the authorization"""
enum AuthorizationType {
  """GitHub Authorization"""
  GITHUB

  """GitHub Enterprise Authorization"""
  GITHUB_ENTERPRISE

  """Bitbucket Authorization"""
  BITBUCKET

  """Google Authorization"""
  GOOGLE

  """SAML Authorization"""
  SAML
}

"""An avatar belonging to a user"""
type Avatar {
  """The URL of the avavtar"""
  url: String!
}

"""A build from a pipeline"""
type Build implements Node {
  annotations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): AnnotationConnection

  """The branch for the build"""
  branch: String!

  """The time when the build was cancelled"""
  canceledAt: DateTime

  """
  The user who canceled this build. If the build was canceled, and this value is
  null, then it was canceled automatically by Buildkite
  """
  canceledBy: User
  comments(first: Int, last: Int): CommentConnection

  """The fully-qualified commit for the build"""
  commit: String!

  """The time when the build was created"""
  createdAt: DateTime
  createdBy: BuildCreator

  """Custom environment variables passed to this build"""
  env: [String!]

  """The time when the build finished"""
  finishedAt: DateTime
  id: ID!
  jobs(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Order the jobs"""
    order: JobOrder = RECENTLY_CREATED
  ): JobConnection

  """The message for the build"""
  message: String
  metaData(first: Int, last: Int): BuildMetaDataConnection

  """The number of the build"""
  number: Int!
  organization: Organization!
  pipeline: Pipeline!
  pullRequest: PullRequest

  """The build that this build was rebuilt from"""
  rebuiltFrom: Build

  """The time when the build became scheduled for running"""
  scheduledAt: DateTime

  """Where the build was created"""
  source: BuildSource!

  """The time when the build started running"""
  startedAt: DateTime

  """The current state of the build"""
  state: BuildStates!

  """The job that this build was triggered from"""
  triggeredFrom: JobTypeTrigger

  """The URL for the build"""
  url: String!

  """The UUID for the build"""
  uuid: String!
}

"""Autogenerated input type of BuildAnnotate"""
input BuildAnnotateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The GraphQL ID of the build you want to annotate"""
  buildID: ID!

  """
  The body of the annotation. Markdown and some limited HTML is supported
  """
  body: String

  """The style of the annotation. The default is `DEFAULT`"""
  style: AnnotationStyle = DEFAULT

  """
  A string label to differentiate this annotation from other annotations. The default is `default`
  """
  context: String = "default"

  """Append to an existing annotation"""
  append: Boolean = false
}

"""Autogenerated return type of BuildAnnotate"""
type BuildAnnotatePayload {
  annotation: Annotation
  annotationEdge: AnnotationEdge
  build: Build

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Author for a build"""
input BuildAuthorInput {
  """The name for the build author"""
  name: String!

  """The email for the build author"""
  email: String!
}

"""Autogenerated input type of BuildCancel"""
input BuildCancelInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of BuildCancel"""
type BuildCancelPayload {
  build: Build!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

type BuildConnection implements Connection {
  count: Int!
  edges: [BuildEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of BuildCreate"""
input BuildCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The GraphQL ID of the pipeline you want to create a build on"""
  pipelineID: ID!

  """The message that is displayed on the build"""
  message: String

  """The commit for the build"""
  commit: String

  """The branch for the build"""
  branch: String

  """Environment variables used for the build"""
  env: [String!]
  metaData: [BuildMetaDataInput!]
  author: BuildAuthorInput
}

"""Autogenerated return type of BuildCreate"""
type BuildCreatePayload {
  build: Build

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Either a `User` or an `UnregisteredUser` type"""
union BuildCreator = User | UnregisteredUser

type BuildEdge {
  cursor: String!
  node: Build
}

"""A comment on a build"""
type BuildMetaData {
  """The key used to set this meta data"""
  key: String!

  """The value set to this meta data"""
  value: String!
}

type BuildMetaDataConnection implements Connection {
  count: Int!
  edges: [BuildMetaDataEdge]
  pageInfo: PageInfo
}

type BuildMetaDataEdge {
  cursor: String!
  node: BuildMetaData
}

"""Meta-data key/value pairs for a build"""
input BuildMetaDataInput {
  """The key for this meta-data item"""
  key: String!

  """The value for this meta-data item"""
  value: String!
}

"""Autogenerated input type of BuildRebuild"""
input BuildRebuildInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of BuildRebuild"""
type BuildRebuildPayload {
  build: Build!

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  rebuild: Build!
}

interface BuildSource {
  name: String!
}

"""A build was triggered via an API"""
type BuildSourceAPI implements BuildSource {
  name: String!
}

"""A build was triggered manually via the frontend"""
type BuildSourceFrontend implements BuildSource {
  name: String!
}

"""A build was triggered via a schedule"""
type BuildSourceSchedule implements BuildSource {
  name: String!
}

"""A build was triggered via a trigger job"""
type BuildSourceTriggerJob implements BuildSource {
  name: String!
}

"""A build was triggered via a Webhook"""
type BuildSourceWebhook implements BuildSource {
  """
  Provider specific headers sent along with the webhook. This will return null if the webhook has been purged by Buildkite.
  """
  headers: [String!]
  name: String!

  """
  The body of the webhook. Buildkite only webhook data for a short period of
  time, so if this returns null - then the webhook data has been purged by Buildkite
  """
  payload: JSON

  """
  The UUID for this webhook. This will return null if the webhook has been purged by Buildkite
  """
  uuid: String
}

"""All the possible states a build can be in"""
enum BuildStates {
  """The build was skipped"""
  SKIPPED

  """The build has yet to start running jobs"""
  SCHEDULED

  """The build is currently running jobs"""
  RUNNING

  """The build passed"""
  PASSED

  """The build failed"""
  FAILED

  """The build is currently being canceled"""
  CANCELING

  """The build was canceled"""
  CANCELED

  """The build is blocked"""
  BLOCKED

  """The build wasn't run"""
  NOT_RUN
}

"""A changelog"""
type Changelog implements Node {
  author: ChangelogAuthor

  """The body of this changelog"""
  body: String
  id: ID!

  """The date and time this changelog was published"""
  publishedAt: DateTime

  """The tag for this changelog"""
  tag: String!

  """The title for this changelog"""
  title: String!

  """The public UUID for this changelog"""
  uuid: String!
}

"""The author of the changelog"""
type ChangelogAuthor {
  avatar: Avatar!

  """The name of the author"""
  name: String!
}

type ChangelogConnection implements Connection {
  count: Int!
  edges: [ChangelogEdge]
  pageInfo: PageInfo
}

type ChangelogEdge {
  cursor: String!
  node: Changelog
}

"""A comment on a build"""
type Comment implements Node {
  """The body of the comment"""
  body: String!

  """The date the comment was published"""
  createdAt: String!
  id: ID!
  user: User

  """The public UUID for this comment"""
  uuid: ID!
}

type CommentConnection implements Connection {
  count: Int!
  edges: [CommentEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of CommentCreate"""
input CommentCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  buildID: ID!
  body: String!
}

"""Autogenerated return type of CommentCreate"""
type CommentCreatePayload {
  build: Build

  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  commentEdge: CommentEdge
}

type CommentEdge {
  cursor: String!
  node: Comment
}

interface Connection {
  count: Int!
  pageInfo: PageInfo
}

"""An ISO-8601 encoded UTC date string"""
scalar DateTime

"""An email address"""
type Email implements Node {
  """The email address"""
  address: String!
  id: ID!

  """Whether the email address is the user's primary address"""
  primary: Boolean!

  """The public UUID for this email"""
  uuid: ID!

  """Whether the email address has been verified by the user"""
  verified: Boolean!
}

type EmailConnection implements Connection {
  count: Int!
  edges: [EmailEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of EmailCreate"""
input EmailCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  address: String!
}

"""Autogenerated return type of EmailCreate"""
type EmailCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  emailEdge: EmailEdge!
  viewer: Viewer!
}

type EmailEdge {
  cursor: String!
  node: Email
}

"""Autogenerated input type of EmailResendVerification"""
input EmailResendVerificationInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of EmailResendVerification"""
type EmailResendVerificationPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  email: Email!
}

"""A shared GraphQL query"""
type GraphQLSnippet {
  """When this GraphQL snippet was created"""
  createdAt: DateTime!
  id: ID!

  """The default operation name for this snippet"""
  operationName: String

  """The query of this GraphQL snippet"""
  query: String!

  """The URL for the GraphQL snippet"""
  url: String!

  """The public UUID for this snippet"""
  uuid: ID!
}

"""Autogenerated input type of GraphQLSnippetCreate"""
input GraphQLSnippetCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  query: String!
  operationName: ID
}

"""Autogenerated return type of GraphQLSnippetCreate"""
type GraphQLSnippetCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  graphQLSnippet: GraphQLSnippet!
}

"""Kinds of jobs that can exist on a build"""
union Job = JobTypeCommand | JobTypeBlock | JobTypeWait | JobTypeTrigger

"""Concurrency configuration for a job"""
type JobConcurrency {
  """The concurrency group"""
  group: String!

  """
  The maximum amount of jobs in the concurrency that are allowed to run at any given time
  """
  limit: Int!
}

"""Searching for concurrency groups on jobs"""
input JobConcurrencySearch {
  """The groups you want to search"""
  group: [String!]
}

type JobConnection implements Connection {
  count: Int!
  edges: [JobEdge]
  pageInfo: PageInfo
}

type JobEdge {
  cursor: String!
  node: Job
}

"""The diferent orders you can sort jobs by"""
enum JobOrder {
  """Order by the most recently assigned jobs first"""
  RECENTLY_ASSIGNED

  """Order by the most recently created jobs first"""
  RECENTLY_CREATED
}

"""All the possible states a job can be in"""
enum JobStates {
  """The job has just been created and doesn't have a state yet"""
  PENDING

  """The job is waiting on a `wait` step to finish"""
  WAITING

  """The job was in a `WAITING` state when the build failed"""
  WAITING_FAILED

  """The job is waiting on a `block` step to finish"""
  BLOCKED

  """The job was in a `BLOCKED` state when the build failed"""
  BLOCKED_FAILED

  """This `block` job has been manually unblocked"""
  UNBLOCKED

  """This `block` job was in a `BLOCKED` state when the build failed"""
  UNBLOCKED_FAILED

  """The job is waiting for jobs with the same concurrency group to finish"""
  LIMITED

  """The job is scheduled and waiting for an agent"""
  SCHEDULED

  """
  The job has been assigned to an agent, and it's waiting for it to accept
  """
  ASSIGNED

  """
  The job was accepted by the agent, and now it's waiting to start running
  """
  ACCEPTED

  """The job is runing"""
  RUNNING

  """The job has finished"""
  FINISHED

  """The job is currently canceling"""
  CANCELING

  """The job was canceled"""
  CANCELED

  """The job is timing out for taking too long"""
  TIMING_OUT

  """The job timed out"""
  TIMED_OUT

  """The job was skipped"""
  SKIPPED

  """The jobs configuration means that it can't be run"""
  BROKEN
}

"""
A type of job that requires a user to unblock it before proceeding in a build pipeline
"""
type JobTypeBlock implements Node {
  """The build that this job is a part of"""
  build: Build
  id: ID!

  """
  Whether or not this job can be unblocked yet (may be waiting on another job to finish)
  """
  isUnblockable: Boolean

  """The label of this block step"""
  label: String

  """The state of the job"""
  state: JobStates!

  """The time when the job was created"""
  unblockedAt: DateTime

  """The user that unblocked this job"""
  unblockedBy: User

  """The UUID for this job"""
  uuid: String!
}

"""A type of job that runs a command on an agent"""
type JobTypeCommand implements Node {
  """The agent that is running the job"""
  agent: Agent

  """The ruleset used to find an agent to run this job"""
  agentQueryRules: [String!]

  """Artifacts uploaded to this job"""
  artifacts(first: Int, last: Int): ArtifactConnection

  """A glob of files to automatically upload after the job finishes"""
  automaticArtifactUploadPaths: String

  """The build that this job is a part of"""
  build: Build

  """The time when the job was cancelled"""
  canceledAt: DateTime

  """The command the job will run"""
  command: String

  """Concurrency information related to a job"""
  concurrency: JobConcurrency

  """The time when the job was created"""
  createdAt: DateTime

  """Environment variables for this job"""
  env: [String!]

  """The exit status returned by the command on the agent"""
  exitStatus: String

  """The time when the job finished"""
  finishedAt: DateTime
  id: ID!

  """The label of the job"""
  label: String

  """If the job has finished and passed"""
  passed: Boolean!

  """The pipeline that this job is a part of"""
  pipeline: Pipeline

  """The time when the job became available to be run by an agent"""
  runnableAt: DateTime

  """The time when the job became scheduled for running"""
  scheduledAt: DateTime

  """The time when the job started running"""
  startedAt: DateTime

  """The state of the job"""
  state: JobStates!

  """The URL for the job"""
  url: String!

  """The UUID for this job"""
  uuid: String!
}

"""Autogenerated input type of JobTypeCommandCancel"""
input JobTypeCommandCancelInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of JobTypeCommandCancel"""
type JobTypeCommandCancelPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  jobTypeCommand: JobTypeCommand!
}

"""Autogenerated input type of JobTypeCommandRetry"""
input JobTypeCommandRetryInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of JobTypeCommandRetry"""
type JobTypeCommandRetryPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  jobTypeCommand: JobTypeCommand!
  retriedInJobTypeCommand: JobTypeCommand!
}

"""Autogenerated input type of JobTypeCommandUpdate"""
input JobTypeCommandUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  label: String
  agentQueryRules: [String]
}

"""Autogenerated return type of JobTypeCommandUpdate"""
type JobTypeCommandUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  jobTypeCommand: JobTypeCommand!
}

"""All the possible types of jobs that can exist"""
enum JobTypes {
  """A job that runs a command on an agent"""
  COMMAND

  """A job that waits for all previous jobs to finish"""
  WAIT

  """
  A job that blocks a pipeline from progressing until it's manually unblocked
  """
  BLOCK

  """A job that triggers another build on a pipeline"""
  TRIGGER
}

"""A type of job that triggers another build on a pipeline"""
type JobTypeTrigger implements Node {
  """The build that this job is a part of"""
  build: Build
  id: ID!

  """The state of the job"""
  state: JobStates!

  """The build that this job triggered"""
  triggered: Build

  """The UUID for this job"""
  uuid: String!
}

"""
A type of job that waits for all previous jobs to pass before proceeding the build pipeline
"""
type JobTypeWait implements Node {
  """The build that this job is a part of"""
  build: Build
  id: ID!

  """The state of the job"""
  state: JobStates!

  """The UUID for this job"""
  uuid: String!
}

"""A blob of JSON represented as a pretty formatted string"""
scalar JSON

"""The root for mutations in this schema"""
type Mutation {
  agentDelete(input: AgentDeleteInput!): AgentDeletePayload
  agentStop(input: AgentStopInput!): AgentStopPayload
  agentTokenCreate(input: AgentTokenCreateInput!): AgentTokenCreatePayload
  agentTokenRevoke(input: AgentTokenRevokeInput!): AgentTokenRevokePayload

  """
  Authorize an API Access Token Code generated by an API Application. Please
  note this mutation is private and cannot be executed externally.
  """
  apiAccessTokenCodeAuthorize(input: APIAccessTokenCodeAuthorizeMutationInput!): APIAccessTokenCodeAuthorizeMutationPayload
  buildAnnotate(input: BuildAnnotateInput!): BuildAnnotatePayload
  buildCancel(input: BuildCancelInput!): BuildCancelPayload
  buildCreate(input: BuildCreateInput!): BuildCreatePayload
  buildRebuild(input: BuildRebuildInput!): BuildRebuildPayload
  commentCreate(input: CommentCreateInput!): CommentCreatePayload

  """Create an email for the current user"""
  emailCreate(input: EmailCreateInput!): EmailCreatePayload

  """Resends a verification email"""
  emailResendVerification(input: EmailResendVerificationInput!): EmailResendVerificationPayload
  graphQLSnippetCreate(input: GraphQLSnippetCreateInput!): GraphQLSnippetCreatePayload
  jobTypeCommandCancel(input: JobTypeCommandCancelInput!): JobTypeCommandCancelPayload
  jobTypeCommandRetry(input: JobTypeCommandRetryInput!): JobTypeCommandRetryPayload
  jobTypeCommandUpdate(input: JobTypeCommandUpdateInput!): JobTypeCommandUpdatePayload

  """
  Dismisses a notice from the Buildkite UI. This mutation is idempotent so if
  you dismiss the same notice multiple times, it will return the original
  `dismissedAt` time
  """
  noticeDismiss(input: NoticeDismissInput!): NoticeDismissPayload
  organizationInvitationCreate(input: OrganizationInvitationCreateInput!): OrganizationInvitationCreatePayload

  """Resends an organization invitation"""
  organizationInvitationResend(input: OrganizationInvitationResendInput!): OrganizationInvitationResendPayload

  """Revokes an organization invitation so it can no longer be accepted"""
  organizationInvitationRevoke(input: OrganizationInvitationRevokeInput!): OrganizationInvitationRevokePayload
  organizationMemberDelete(input: OrganizationMemberDeleteInput!): OrganizationMemberDeletePayload
  organizationMemberUpdate(input: OrganizationMemberUpdateInput!): OrganizationMemberUpdatePayload
  pipelineCreate(input: PipelineCreateInput!): PipelineCreatePayload
  pipelineFavorite(input: PipelineFavoriteInput!): PipelineFavoritePayload
  pipelineScheduleCreate(input: PipelineScheduleCreateInput!): PipelineScheduleCreatePayload
  pipelineScheduleDelete(input: PipelineScheduleDeleteInput!): PipelineScheduleDeletePayload
  pipelineScheduleUpdate(input: PipelineScheduleUpdateInput!): PipelineScheduleUpdatePayload
  pipelineUpdate(input: PipelineUpdateInput!): PipelineUpdatePayload
  ssoProviderCreate(input: SSOProviderCreateInput!): SSOProviderCreatePayload
  ssoProviderDelete(input: SSOProviderDeleteInput!): SSOProviderDeletePayload
  ssoProviderDisable(input: SSOProviderDisableInput!): SSOProviderDisablePayload
  ssoProviderEnable(input: SSOProviderEnableInput!): SSOProviderEnablePayload
  ssoProviderUpdate(input: SSOProviderUpdateInput!): SSOProviderUpdatePayload
  teamCreate(input: TeamCreateInput!): TeamCreatePayload
  teamDelete(input: TeamDeleteInput!): TeamDeletePayload
  teamMemberCreate(input: TeamMemberCreateInput!): TeamMemberCreatePayload
  teamMemberDelete(input: TeamMemberDeleteInput!): TeamMemberDeletePayload
  teamMemberUpdate(input: TeamMemberUpdateInput!): TeamMemberUpdatePayload
  teamPipelineCreate(input: TeamPipelineCreateInput!): TeamPipelineCreatePayload
  teamPipelineDelete(input: TeamPipelineDeleteInput!): TeamPipelineDeletePayload
  teamPipelineUpdate(input: TeamPipelineUpdateInput!): TeamPipelineUpdatePayload
  teamUpdate(input: TeamUpdateInput!): TeamUpdatePayload

  """
  Activate a previously-generated TOTP configuration, and its Recovery Codes.
  
  Once activated, both this TOTP configuration, and the associated Recovery Codes will become active for the user.
  Any previous TOTP configuration or Recovery Codes will no longer be usable.
  
  This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
  
  """
  totpActivate(input: TOTPActivateInput!): TOTPActivatePayload

  """
  Create a new TOTP configuration for the current user.
  
  This will produce a TOTP configuration with an associated set of Recovery
  Codes. The Recovery Codes must be presented to the user prior to the TOTP's
  activation with `totpActivate`.
  Neither TOTP configuration nor Recovery Codes will be usable until they have been activated.
  
  This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
  
  """
  totpCreate(input: TOTPCreateInput!): TOTPCreatePayload

  """
  Delete a TOTP configuration.
  
  If a TOTP configuration was active, it will no longer be used for logging on to the user's account.
  Any Recovery Codes associated with the TOTP configuration will also no longer be usable.
  
  This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
  
  """
  totpDelete(input: TOTPDeleteInput!): TOTPDeletePayload

  """
  Generate a new set of Recovery Codes for a given TOTP.
  
  The new Recovery Codes will immediately replace any existing recovery codes.
  
  This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
  
  """
  totpRecoveryCodesRegenerate(input: TOTPRecoveryCodesRegenerateInput!): TOTPRecoveryCodesRegeneratePayload
}

"""An object with an ID."""
interface Node {
  """ID of the object."""
  id: ID!
}

"""A notice or notice that a user sees in the Buildkite UI"""
type Notice {
  """The time when this notice was dismissed from the UI"""
  dismissedAt: DateTime
  id: ID!

  """The namespace of this notice"""
  namespace: NoticeNamespaces!

  """The scope within the namespace"""
  scope: String!
}

"""Autogenerated input type of NoticeDismiss"""
input NoticeDismissInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of NoticeDismiss"""
type NoticeDismissPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  notice: Notice
}

"""All the possible namespaces for a notice"""
enum NoticeNamespaces {
  """A change to an existing feature"""
  CHANGE

  """The user has had an email suggested to them"""
  EMAIL_SUGGESTION

  """A new feature was added"""
  FEATURE
}

interface NotificationService {
  """The description of this service"""
  description: String!
  id: ID!

  """The name of the service provider"""
  name: String!
}

"""Deliver notifications to Campfire"""
type NotificationServiceCampfire implements Node & NotificationService {
  """The description of this service"""
  description: String!
  id: ID!

  """The name of the service provider"""
  name: String!
}

"""Deliver notifications to Flowdock"""
type NotificationServiceFlowdock implements NotificationService {
  """The description of this service"""
  description: String!
  id: ID!

  """The name of the service provider"""
  name: String!
}

"""Deliver notifications to Hipchat"""
type NotificationServiceHipchat implements NotificationService {
  """The description of this service"""
  description: String!
  id: ID!

  """The name of the service provider"""
  name: String!
}

"""Deliver notifications to Slack"""
type NotificationServiceSlack implements Node & NotificationService {
  """The description of this service"""
  description: String!
  id: ID!

  """The name of the service provider"""
  name: String!
}

"""Deliver notifications to a custom URL"""
type NotificationServiceWebhook implements NotificationService {
  """The description of this service"""
  description: String!
  id: ID!

  """The name of the service provider"""
  name: String!
}

"""A operating system that an agent can run on"""
type OperatingSystem {
  """The name of the operating system"""
  name: String!
}

"""An organization"""
type Organization implements Node {
  """
  Returns agent access tokens for an Organization. By default returns all tokens, whether revoked or non-revoked.
  """
  agentTokens(
    first: Int
    last: Int

    """Filter tokens by whether they are revoked or not"""
    revoked: Boolean
  ): AgentTokenConnection
  agents(
    first: Int
    after: String
    last: Int
    before: String

    """
    Search agents for the given query terms case insensitively across name and meta data
    """
    search: String

    """Filter agents to those only having the matching meta data"""
    metaData: [String!]

    """Filter agent by whether they are running a job or not"""
    isRunningJob: Boolean
  ): AgentConnection
  auditEvents(
    first: Int
    after: String
    last: Int
    before: String

    """Filter events which occurred from the given date and time"""
    occurredAtFrom: DateTime

    """Filter events which occurred until the given date and time"""
    occurredAtTo: DateTime

    """Filter the events by type"""
    type: [AuditEventType!]

    """Filter the events by the type of actor who initiated them"""
    actorType: [AuditActorType!]

    """Filter the events by the IDs of the actors who initiated them"""
    actor: [ID!]

    """Filter the events by the type of subject they relate to"""
    subjectType: [AuditSubjectType!]

    """Filter the events by the IDs of the subject they relate to"""
    subject: [ID!]

    """Order the events"""
    order: OrganizationAuditEventOrders = RECENTLY_OCCURRED
  ): OrganizationAuditEventConnection

  """The URL to an icon representing this organization"""
  iconUrl: String
  id: ID!
  invitations(
    first: Int
    after: String
    last: Int
    before: String
    state: [OrganizationInvitationStates!]

    """Order the invitations"""
    order: OrganizationInvitationOrders = RECENTLY_CREATED
  ): OrganizationInvitationConnection
  jobs(
    first: Int
    after: String
    last: Int
    before: String
    type: [JobTypes!]
    state: [JobStates!]
    agentQueryRules: [String!]
    concurrency: JobConcurrencySearch

    """Order the jobs"""
    order: JobOrder = RECENTLY_CREATED
  ): JobConnection

  """Returns users within the organization"""
  members(
    first: Int
    after: String
    last: Int
    before: String

    """Search members named like the given query case insensitively"""
    search: String

    """The primary email of the team member"""
    email: String

    """Filter the members by team"""
    team: TeamSelector

    """Search members by their role"""
    role: [OrganizationMemberRole!]
    security: OrganizationMemberSecurityInput
    sso: OrganizationMemberSSOInput

    """Order the members"""
    order: OrganizationMemberOrder = RECENTLY_CREATED
  ): OrganizationMemberConnection

  """The name of the organization"""
  name: String!
  permissions: OrganizationPermissions

  """
  Return all the pipelines the current user has access to for this organization
  """
  pipelines(
    first: Int
    after: String
    last: Int
    before: String

    """Search pipelines named like the given query case insensitively"""
    search: String
    repository: PipelineRepositoryInput

    """Filter the pipelines by team"""
    team: TeamSelector

    """Only return favorited pipelines"""
    favorite: Boolean

    """Order the pipelines"""
    order: PipelineOrders = RECENTLY_CREATED
  ): PipelineConnection

  """
  Whether this organization is visible to everyone, including people outside it
  """
  public: Boolean!

  """The slug used to represent the organization in URLs"""
  slug: String!

  """The single sign-on configuration of this organization"""
  sso: OrganizationSSO

  """Single sign on providers created for an organization"""
  ssoProviders(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): SSOProviderConnection

  """Returns teams within the organization that the viewer can see"""
  teams(
    first: Int
    after: String
    last: Int
    before: String

    """Search teams"""
    search: String

    """Filter teams by pipeline"""
    pipeline: PipelineSelector

    """Filter teams by user membership"""
    user: UserSelector

    """Search teams by their privacy"""
    privacy: [TeamPrivacy!]

    """Order the teams"""
    order: TeamOrder = NAME
  ): TeamConnection

  """The public UUID for this organization"""
  uuid: String!
}

type OrganizationAuditEventConnection implements Connection {
  count: Int!
  edges: [OrganizationAuditEventEdge]
  pageInfo: PageInfo
}

type OrganizationAuditEventEdge {
  cursor: String!
  node: AuditEvent
}

"""The diferent orders you can sort audit events by"""
enum OrganizationAuditEventOrders {
  """Order by the most recently occurring events first"""
  RECENTLY_OCCURRED
}

type OrganizationConnection implements Connection {
  count: Int!
  edges: [OrganizationEdge]
  pageInfo: PageInfo
}

type OrganizationEdge {
  cursor: String!
  node: Organization
}

"""A pending invitation to a user to join this organization"""
type OrganizationInvitation implements Node {
  """The time when the invitation was accepted"""
  acceptedAt: DateTime

  """The user that accepted this invite"""
  acceptedBy: User

  """The time when the invitation was created"""
  createdAt: DateTime

  """The user that added invited this email address"""
  createdBy: User

  """The email address of this invitation"""
  email: String!

  """The time when the invitation was automatically expired"""
  expiredAt: DateTime
  id: ID!
  organization: Organization
  permissions: OrganizationInvitationPermissions

  """The time when this invitation was revoked"""
  revokedAt: DateTime

  """The user that revoked this invitation"""
  revokedBy: User

  """
  The role the user will have in the organization once they've accepted the invitation
  """
  role: OrganizationMemberRole!

  """
  The slug of the invitation that can be used to find an invitation in the query root
  """
  slug: String!
  sso: OrganizationInvitationSSOType!

  """The current state of the invitation"""
  state: OrganizationInvitationStates!

  """Teams that have been assigned to this invitation"""
  teams(
    """Returns the first _n_ elements from the list."""
    first: Int
  ): OrganizationInvitationTeamAssignmentConnection

  """The UUID of the invitation"""
  uuid: String!
}

type OrganizationInvitationConnection implements Connection {
  count: Int!
  edges: [OrganizationInvitationEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of OrganizationInvitationCreate"""
input OrganizationInvitationCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationID: ID!
  emails: [String!]!
  role: OrganizationMemberRole
  sso: OrganizationInvitationSSOInput
  teams: [OrganizationInvitationTeamAssignmentInput!]
}

"""Autogenerated return type of OrganizationInvitationCreate"""
type OrganizationInvitationCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  invitationEdges: [OrganizationInvitationEdge]
  organization: Organization
}

type OrganizationInvitationEdge {
  cursor: String!
  node: OrganizationInvitation
}

"""The diferent orders you can sort organization invitations by"""
enum OrganizationInvitationOrders {
  """Order by email address alphabetically"""
  EMAIL

  """Order by the most recently created invitations first"""
  RECENTLY_CREATED
}

"""
Permissions information about what actions the current user can do against this invitation
"""
type OrganizationInvitationPermissions {
  """Whether the user can resend this invitation"""
  organizationInvitationResend: Permission

  """Whether the user can revoke this invitation"""
  organizationInvitationRevoke: Permission
}

"""Autogenerated input type of OrganizationInvitationResend"""
input OrganizationInvitationResendInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of OrganizationInvitationResend"""
type OrganizationInvitationResendPayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationInvitation: OrganizationInvitation!
}

"""Autogenerated input type of OrganizationInvitationRevoke"""
input OrganizationInvitationRevokeInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of OrganizationInvitationRevoke"""
type OrganizationInvitationRevokePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organization: Organization!
  organizationInvitation: OrganizationInvitation!
  organizationInvitationEdge: OrganizationInvitationEdge!
}

input OrganizationInvitationSSOInput {
  mode: OrganizationMemberSSOModeEnum!
}

"""Information about the SSO setup for this invited organization member"""
type OrganizationInvitationSSOType {
  """The SSO mode of the invited organization member"""
  mode: OrganizationMemberSSOModeEnum
}

"""All the possible states that an organization invitation can be"""
enum OrganizationInvitationStates {
  """The invitation is waiting for a user to accept it"""
  PENDING

  """The invitation was accepted by the person it was sent to"""
  ACCEPTED

  """The invitation wasn't accepted and the link has expired"""
  EXPIRED

  """The invitation was revoked and can no longer be accepted"""
  REVOKED
}

"""A team that has been assigned to an invitation"""
type OrganizationInvitationTeamAssignment {
  id: ID!

  """The role that the user will have once they've accepted the invite"""
  role: TeamMemberRole!

  """The team that this assignment refers to"""
  team: Team!
}

type OrganizationInvitationTeamAssignmentConnection implements Connection {
  count: Int!
  edges: [OrganizationInvitationTeamAssignmentEdge]
  pageInfo: PageInfo
}

type OrganizationInvitationTeamAssignmentEdge {
  cursor: String!
  node: OrganizationInvitationTeamAssignment
}

"""Used to assign teams to organization invitation in mutations"""
input OrganizationInvitationTeamAssignmentInput {
  """
  The ID of the team you want the user to join once they've accepted the invite
  """
  id: ID!

  """The role in the team you want the user to have"""
  role: TeamMemberRole!
}

"""A member of an organization"""
type OrganizationMember implements Node {
  """The time when this user was added to the organization"""
  createdAt: DateTime!

  """The user that added invited this user"""
  createdBy: User
  id: ID!
  organization: Organization!
  permissions: OrganizationMemberPermissions!

  """Pipelines the user has access to within the organization"""
  pipelines(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Search within the pipelines the user has access to"""
    search: String

    """Order the pipelines returned"""
    order: PipelineOrders = RECENTLY_CREATED
  ): OrganizationMemberPipelineConnection!

  """The users role within the organization"""
  role: OrganizationMemberRole!
  security: OrganizationMemberSecurity!
  sso: OrganizationMemberSSO!

  """Teams that this user is a part of within the organization"""
  teams(
    first: Int
    after: String
    last: Int
    before: String

    """Order the members returned"""
    order: TeamMemberOrder = RECENTLY_CREATED
  ): TeamMemberConnection!
  user: User!

  """The public UUID for this organization member"""
  uuid: String!
}

type OrganizationMemberConnection implements Connection {
  count: Int!
  edges: [OrganizationMemberEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of OrganizationMemberDelete"""
input OrganizationMemberDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of OrganizationMemberDelete"""
type OrganizationMemberDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedOrganizationMemberID: ID!
  organization: Organization
  user: User
}

type OrganizationMemberEdge {
  cursor: String!
  node: OrganizationMember
}

"""The diferent orders you can sort members by"""
enum OrganizationMemberOrder {
  """Order by name alphabetically"""
  NAME

  """Order by the most recently created members first"""
  RECENTLY_CREATED

  """Order by relevance when searching for members"""
  RELEVANCE
}

"""
Permissions information about what actions the current user can do against the organization membership record
"""
type OrganizationMemberPermissions {
  """Whether the user can delete the user from the organization"""
  organizationMemberDelete: Permission

  """
  Whether the user can update the organization's members role information
  """
  organizationMemberUpdate: Permission
}

"""
Represents the connection between a user an a pipeline within an organization
"""
type OrganizationMemberPipeline {
  """The pipeline the user has access to within the organization"""
  pipeline: Pipeline!
}

type OrganizationMemberPipelineConnection implements Connection {
  count: Int!
  edges: [OrganizationMemberPipelineEdge]
  pageInfo: PageInfo
}

type OrganizationMemberPipelineEdge {
  cursor: String!
  node: OrganizationMemberPipeline
}

"""The roles a user can be within an organization"""
enum OrganizationMemberRole {
  """The user is a regular member of the organization"""
  MEMBER

  """Has full access to the entire organization"""
  ADMIN
}

"""
Information about what security settings the user has enabled in Buildkite
"""
type OrganizationMemberSecurity {
  """If the user has secured their Buildkite user account with a password"""
  passwordProtected: Boolean!

  """If the user has enabled Two Factor Authentication"""
  twoFactorEnabled: Boolean!
}

input OrganizationMemberSecurityInput {
  twoFactorEnabled: Boolean
  passwordProtected: Boolean
}

"""Information about the SSO setup for this organization member"""
type OrganizationMemberSSO {
  """The SSO mode of the organization member"""
  mode: OrganizationMemberSSOModeEnum
}

input OrganizationMemberSSOInput {
  mode: OrganizationMemberSSOModeEnum!
}

"""The SSO authorization modes you can use on a member"""
enum OrganizationMemberSSOModeEnum {
  """The member must use SSO to access your organization"""
  REQUIRED

  """The member can either use SSO or their email & password"""
  OPTIONAL
}

"""Autogenerated input type of OrganizationMemberUpdate"""
input OrganizationMemberUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  role: OrganizationMemberRole
  sso: OrganizationMemberSSOInput
}

"""Autogenerated return type of OrganizationMemberUpdate"""
type OrganizationMemberUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationMember: OrganizationMember
}

"""
Permissions information about what actions the current user can do against the organization
"""
type OrganizationPermissions {
  """Whether the user can create agent tokens"""
  agentTokenCreate: Permission

  """Whether the user can access agent tokens"""
  agentTokenView: Permission

  """Whether the user can create a see a list of agents in organization"""
  agentView: Permission

  """Whether the user can access audit events for the organization"""
  auditEventsView: Permission

  """
  Whether the user can change the notification services for the organization
  """
  notificationServiceUpdate: Permission

  """Whether the user can view and manage billing for the organization"""
  organizationBillingUpdate: Permission

  """Whether the user can invite members from an organization"""
  organizationInvitationCreate: Permission

  """Whether the user can update/remove members from an organization"""
  organizationMemberUpdate: Permission

  """Whether the user can see members in the organization"""
  organizationMemberView: Permission

  """
  Whether the user can change the organization name and related source code provider settings
  """
  organizationUpdate: Permission

  """Whether the user can create a new pipeline in the organization"""
  pipelineCreate: Permission

  """
  Whether the user can create a new pipeline without adding it to any teams within the organization
  """
  pipelineCreateWithoutTeams: Permission

  """Whether the user can create a see a list of pipelines in organization"""
  pipelineView: Permission

  """Whether the user can manage portals in the organization"""
  portalUpdate: Permission

  """Whether the user can change SSO Providers for the organization"""
  ssoProviderCreate: Permission

  """Whether the user can change SSO Providers for the organization"""
  ssoProviderUpdate: Permission

  """
  Whether the user can administer one or all the teams in the organization
  """
  teamAdmin: Permission

  """Whether the user can create teams for the organization"""
  teamCreate: Permission

  """Whether the user can toggle teams on/off for the organzation"""
  teamEnabledChange: Permission

  """Whether the user can see teams in the organization"""
  teamView: Permission
}

"""Single sign-on settings for an organization"""
type OrganizationSSO {
  """Whether this account is configured for single sign-on"""
  isEnabled: Boolean!

  """The single sign-on provider for this organization"""
  provider: OrganizationSSOProvider
}

"""Single sign-on provider information for an organization"""
type OrganizationSSOProvider {
  name: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

"""The result of checking a permissions"""
type Permission {
  allowed: Boolean!
  code: String
  message: String
}

"""A pipeline"""
type Pipeline implements Node {
  """Returns the builds for this pipeline"""
  builds(
    first: Int
    last: Int
    state: [BuildStates!]

    """Use `%default` to search by the Pipelines default branch"""
    branch: [String!]
    commit: [String!]
    metaData: [String!]
    createdAtFrom: DateTime
    createdAtTo: DateTime
  ): BuildConnection

  """
  The shortest length to which any git commit ID may be truncated while guaranteeing referring to a unique commit
  """
  commitShortLength: Int!

  """The time when the pipeline was created"""
  createdAt: DateTime

  """The default branch for this pipeline"""
  defaultBranch: String

  """The short description of the pipeline"""
  description: String

  """Returns true if the viewer has favorited this pipeline"""
  favorite: Boolean!
  id: ID!
  jobs(
    first: Int
    after: String
    last: Int
    before: String
    type: [JobTypes!]
    state: [JobStates!]
    agentQueryRules: [String!]

    """Order the jobs"""
    order: JobOrder = RECENTLY_CREATED
  ): JobConnection
  metrics(first: Int, last: Int): PipelineMetricConnection

  """The name of the pipeline"""
  name: String!

  """The next build number in the sequence"""
  nextBuildNumber: Int!
  organization: Organization!
  permissions: PipelinePermissions!

  """
  Whether this pipeline is visible to everyone, including people outside this organization
  """
  public: Boolean! @deprecated(reason: "Use `visibility`")

  """The repository for this pipeline"""
  repository: Repository

  """Schedules for this pipeline"""
  schedules(first: Int): PipelineScheduleConnection

  """The slug of the pipeline"""
  slug: String!
  steps: PipelineSteps

  """Teams associated with this pipeline"""
  teams(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Search for teams associated that this pipeline is assigned to"""
    search: String

    """Order the pipelines returned"""
    order: TeamPipelineOrder = RECENTLY_CREATED
  ): TeamPipelineConnection

  """The URL for the pipeline"""
  url: String!

  """The UUID of the pipeline"""
  uuid: String!

  """
  Whether this pipeline is visible to everyone, including people outside this organization
  """
  visibility: PipelineVisibility!
}

"""The access levels that can be assigned to a pipeline"""
enum PipelineAccessLevels {
  """Allows edits, builds and reads"""
  MANAGE_BUILD_AND_READ

  """Allows builds and read only"""
  BUILD_AND_READ

  """Read only - no builds or edits"""
  READ_ONLY
}

type PipelineConnection implements Connection {
  count: Int!
  edges: [PipelineEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of PipelineCreate"""
input PipelineCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationId: ID!

  """The name of the pipeline."""
  name: String!

  """A description of this pipeline."""
  description: String

  """The visibility of the pipeline, either PUBLIC or PRIVATE."""
  visibility: PipelineVisibility = PRIVATE

  """A source code repository that will back this pipeline"""
  repository: PipelineRepositoryInput!

  """Steps used by this pipeline defined as YAML"""
  steps: PipelineStepsInput!

  """Which teams this pipeline should be assigned to"""
  teams: [PipelineTeamAssignmentInput!]

  """The default branch used to show statistics about the build"""
  defaultBranch: String = "master"

  """The initial build number to use in the sequence"""
  nextBuildNumber: Int
}

"""Autogenerated return type of PipelineCreate"""
type PipelineCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organization: Organization!
  pipeline: Pipeline!
  pipelineEdge: PipelineEdge!
}

type PipelineEdge {
  cursor: String!
  node: Pipeline
}

"""Autogenerated input type of PipelineFavorite"""
input PipelineFavoriteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  favorite: Boolean!
}

"""Autogenerated return type of PipelineFavorite"""
type PipelineFavoritePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline
}

"""A metric for a pipeline"""
type PipelineMetric implements Node {
  id: ID!

  """The label of this metric"""
  label: ID!

  """The URL for this metric"""
  url: String

  """The value for this metric"""
  value: String
}

type PipelineMetricConnection implements Connection {
  count: Int!
  edges: [PipelineMetricEdge]
  pageInfo: PageInfo
}

type PipelineMetricEdge {
  cursor: String!
  node: PipelineMetric
}

"""The diferent orders you can sort pipelines by"""
enum PipelineOrders {
  """Order by name alphabetically"""
  NAME

  """
  Order by favorites first alphabetically, then the rest of the pipelines alphabetically
  """
  NAME_WITH_FAVORITES_FIRST

  """Order by the most recently created pipelines first"""
  RECENTLY_CREATED

  """Order by relevance when searching for pipelines"""
  RELEVANCE
}

"""
Permission information about what actions the current user can do against the pipeline
"""
type PipelinePermissions {
  """Whether the user can create builds on this pipeline"""
  buildCreate: Permission!

  """Whether the user can delete this pipeline"""
  pipelineDelete: Permission!

  """Whether the user can favorite this pipeline"""
  pipelineFavorite: Permission!

  """Whether the user can create schedules on this pipeline"""
  pipelineScheduleCreate: Permission!

  """Whether the user can edit the settings of this pipeline"""
  pipelineUpdate: Permission!
}

"""Repository information for a pipeline"""
input PipelineRepositoryInput {
  """The remote URL for this repository i.e. git@github.com:foo/bar.git"""
  url: String!
}

"""
A schedule of when a build should automatically triggered for a Pipeline
"""
type PipelineSchedule implements Node {
  """
  The branch to use for builds that this schedule triggers. Defaults to to the default branch in the Pipeline
  """
  branch: String

  """Returns the builds created by this schedule"""
  builds(first: Int, last: Int): BuildConnection

  """
  The commit to use for builds that this schedule triggers. Defaults to `HEAD`
  """
  commit: String

  """The time when this schedule was created"""
  createdAt: DateTime
  createdBy: User

  """A definition of the trigger build schedule in cron syntax"""
  cronline: String!

  """If this Pipeline schedule is currently enabled"""
  enabled: Boolean

  """Environment variables passed to any triggered builds"""
  env: [String!]

  """The time when this schedule failed"""
  failedAt: DateTime

  """
  If the last attempt at triggering this scheduled build fails, this will be the reason
  """
  failedMessage: String
  id: ID!

  """A short description of the Pipeline schedule"""
  label: String!

  """The message to use for builds that this schedule triggers"""
  message: String

  """The time when this schedule will create a build next"""
  nextBuildAt: DateTime

  """
  The user who owns any builds created by this schedule, if they are not the creator
  """
  ownedBy: User
  permissions: PipelineSchedulePermissions
  pipeline: Pipeline

  """The UUID of the Pipeline schedule"""
  uuid: String!
}

type PipelineScheduleConnection implements Connection {
  count: Int!
  edges: [PipelineScheduleEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of PipelineScheduleCreate"""
input PipelineScheduleCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineID: ID!
  label: String
  cronline: String
  message: String
  commit: String
  branch: String
  env: String
  enabled: Boolean
}

"""Autogenerated return type of PipelineScheduleCreate"""
type PipelineScheduleCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
  pipelineScheduleEdge: PipelineScheduleEdge!
}

"""Autogenerated input type of PipelineScheduleDelete"""
input PipelineScheduleDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of PipelineScheduleDelete"""
type PipelineScheduleDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedPipelineScheduleID: ID!
  pipeline: Pipeline
}

type PipelineScheduleEdge {
  cursor: String!
  node: PipelineSchedule
}

"""
Permission information about what actions the current user can do against the pipeline schedule
"""
type PipelineSchedulePermissions {
  """Whether the user can delete the schedule"""
  pipelineScheduleDelete: Permission

  """Whether the user can update the schedule"""
  pipelineScheduleUpdate: Permission
}

"""Autogenerated input type of PipelineScheduleUpdate"""
input PipelineScheduleUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  label: String
  cronline: String
  message: String
  commit: String
  branch: String
  env: String
  enabled: Boolean
  ownedById: ID
}

"""Autogenerated return type of PipelineScheduleUpdate"""
type PipelineScheduleUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipelineSchedule: PipelineSchedule!
}

"""
A Pipeline identifier using a slug, and optionally negated with a leading `!`
"""
scalar PipelineSelector

"""Steps defined on a pipeline"""
type PipelineSteps {
  """A YAML representation of the pipeline steps"""
  yaml: YAML
}

"""Step definition for a pipeline"""
input PipelineStepsInput {
  """
  A YAML representation of the steps in this pipeline. This is formatted the same as `buildkite-agent pipeline upload
  """
  yaml: String!
}

"""Used to assign teams to pipelines"""
input PipelineTeamAssignmentInput {
  """The ID of the team you want to be assigned"""
  id: ID!

  """The access level members within the team have to the pipeline"""
  accessLevel: PipelineAccessLevels = MANAGE_BUILD_AND_READ
}

"""Autogenerated input type of PipelineUpdate"""
input PipelineUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!

  """The name of the pipeline."""
  name: String

  """A description of this pipeline."""
  description: String

  """The visibility of the pipeline, either PUBLIC or PRIVATE."""
  visibility: PipelineVisibility

  """A source code repository that will back this pipeline"""
  repository: PipelineRepositoryInput

  """Steps used by this pipeline defined as YAML"""
  steps: PipelineStepsInput

  """The default branch used to show statistics about the build"""
  defaultBranch: String

  """The next build number to use in the sequence"""
  nextBuildNumber: Int
}

"""Autogenerated return type of PipelineUpdate"""
type PipelineUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline!
}

"""The visibility of the pipeline"""
enum PipelineVisibility {
  """The pipeline is public"""
  PUBLIC

  """The pipeline is private"""
  PRIVATE
}

type Portal {
  id: ID!
}

type PortalEndpoint {
  id: ID!
}

"""A pull request on a provider"""
type PullRequest {
  id: String!
}

"""The query root for this schema"""
type Query {
  """Find an agent by its slug"""
  agent(
    """
    The UUID for the agent, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    slug: ID!
  ): Agent

  """Find an agent token by its slug"""
  agentToken(
    """
    The UUID for the agent token, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    slug: ID!
  ): AgentToken

  """Find a API Acccess Token code"""
  apiAccessTokenCode(
    """The code provided by the Auth API"""
    code: ID!
  ): APIAccessTokenCode

  """Find an artifact by its UUID"""
  artifact(uuid: ID!): Artifact

  """Find an audit event via its uuid"""
  auditEvent(
    """
    The UUID for the audit event i.e. `0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    uuid: ID!
  ): AuditEvent

  """Find a build by its slug or UUID"""
  build(
    """
    The number of the build, prefixed with its organization and pipeline. i.e. `acme-inc/my-pipeline/123`
    """
    slug: ID

    """The UUID of the build"""
    uuid: ID
  ): Build

  """Find a GraphQL snippet"""
  graphQLSnippet(
    """The UUID for this GraphQL snippet"""
    uuid: String!
  ): GraphQLSnippet

  """Find a build job by its UUID"""
  job(uuid: ID!): Job

  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node

  """Find a notification service via its UUID"""
  notificationService(
    """
    The UUID for the notification service i.e. `0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    uuid: ID!
  ): NotificationService

  """Find an organization by its slug"""
  organization(
    """The organizations slug"""
    slug: ID!
  ): Organization

  """Find an organization invitation via its slug"""
  organizationInvitation(
    """
    The UUID for the invitation, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    slug: ID!
  ): OrganizationInvitation

  """Find an organization membership via its slug"""
  organizationMember(
    """
    The UUID for the membership, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    slug: ID!
  ): OrganizationMember

  """Find a pipeline by its slug"""
  pipeline(
    """
    The slug of the pipeline, prefixed with its organization. i.e. `acme-inc/my-pipeline`
    """
    slug: ID!
  ): Pipeline

  """Find a pipeline schedule by its slug"""
  pipelineSchedule(
    """
    The UUID for the pipeline schedule, prefixed by its organization and
    pipeline's slug i.e.
    `acme-inc/my-pipeline/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    slug: ID!
  ): PipelineSchedule

  """Find an sso provider either using it's slug, or UUID"""
  ssoProvider(
    """
    The slug for the sso provider, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`
    """
    slug: ID

    """The UUID of the sso provider"""
    uuid: ID
  ): SSOProvider

  """Find a team by its UUID"""
  team(
    """
    The slug of the team, prefixed with its organization. i.e. `acme-inc/awesome-team`
    """
    slug: ID!
  ): Team

  """Context of the current user using the GraphQL API"""
  viewer: Viewer
}

"""A recovery code"""
type RecoveryCode {
  """The recovery code."""
  code: String!

  """Whether the recovery codes is used"""
  consumed: Boolean!

  """Foo"""
  consumedAt: String
}

"""A batch of recovery codes"""
type RecoveryCodeBatch {
  """Whether the batch of recovery codes is active"""
  active: Boolean!

  """
  The recovery codes from this batch. Codes are consumed when used, and codes
  will be included in this list whether consumed or not
  """
  codes: [RecoveryCode!]!
  id: ID!
}

"""A repository associated with a pipeline"""
type Repository {
  """The repository’s provider"""
  provider: RepositoryProvider

  """The git URL for this repository"""
  url: String!
}

interface RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Beanstalk"""
type RepositoryProviderBeanstalk implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Bitbucket"""
type RepositoryProviderBitbucket implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Bitbucket Server"""
type RepositoryProviderBitbucketServer implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Codebase"""
type RepositoryProviderCodebase implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by GitHub"""
type RepositoryProviderGithub implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by GitHub Enterprise"""
type RepositoryProviderGithubEnterprise implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Gitlab"""
type RepositoryProviderGitlab implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Gitlab Community Edition"""
type RepositoryProviderGitlabCommunity implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""A pipeline's repository is being provided by Gitlab Enterprise Edition"""
type RepositoryProviderGitlabEnterprise implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

"""
A pipeline's repository is being provided by a service unknown to Buildkite
"""
type RepositoryProviderUnknown implements RepositoryProvider {
  """The name of the provider"""
  name: String!

  """This URL to the provider’s web interface"""
  url: String

  """
  The URL to use when setting up webhooks from the provider to trigger Buildkite builds
  """
  webhookUrl: String
}

type SCMPipelineSettings {
  id: ID!
}

type SCMService {
  id: ID!
}

interface SSOProvider {
  """The time when this SSO Provider was created"""
  createdAt: DateTime!

  """The user that created this SSO Provider"""
  createdBy: User!

  """The time when this SSO Provider was disabled"""
  disabledAt: DateTime

  """The user that disabled this SSO Provider"""
  disabledBy: User

  """The reason this SSO Provider was disabled"""
  disabledReason: String

  """
  An email domain whose addresses should be offered this SSO Provider during login.
  """
  emailDomain: String
  emailDomainVerificationAddress: String
  emailDomainVerifiedAt: DateTime

  """The time when this SSO Provider was enabled"""
  enabledAt: DateTime

  """The user that enabled this SSO Provider"""
  enabledBy: User
  id: ID!

  """
  An extra message that can be added the Authorization screen of an SSO Provider
  """
  note: String
  organization: Organization

  """
  How long a session should last before requring re-authorization. A `null` value indicates an infinite session.
  """
  sessionDurationInHours: Int

  """The current state of the SSO Provider"""
  state: SSOProviderStates!

  """
  Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated.
  """
  testAuthorizationRequired: Boolean

  """The type of SSO Provider"""
  type: SSOProviderTypes!

  """The authorization URL for this SSO Provider"""
  url: String!

  """The UUID for this SSO Provider"""
  uuid: ID!
}

type SSOProviderConnection implements Connection {
  count: Int!
  edges: [SSOProviderEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of SSOProviderCreate"""
input SSOProviderCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationId: ID!
  type: SSOProviderTypes!
  note: String
  sessionDurationInHours: Int
  emailDomain: String
  emailDomainVerificationAddress: String
  identityProvider: SSOProviderSAMLIdP
  digestMethod: SSOProviderSAMLXMLSecurity
  signatureMethod: SSOProviderSAMLRSAXMLSecurity
  githubOrganizationName: String
  googleHostedDomain: String
  discloseGoogleHostedDomain: Boolean
}

"""Autogenerated return type of SSOProviderCreate"""
type SSOProviderCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organization: Organization!
  ssoProvider: SSOProvider!
  ssoProviderEdge: SSOProviderEdge!
}

"""Autogenerated input type of SSOProviderDelete"""
input SSOProviderDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of SSOProviderDelete"""
type SSOProviderDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedSSOProviderId: ID!
  organization: Organization!
}

"""Autogenerated input type of SSOProviderDisable"""
input SSOProviderDisableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  disabledReason: String
}

"""Autogenerated return type of SSOProviderDisable"""
type SSOProviderDisablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ssoProvider: SSOProvider!
}

type SSOProviderEdge {
  cursor: String!
  node: SSOProvider
}

"""Autogenerated input type of SSOProviderEnable"""
input SSOProviderEnableInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of SSOProviderEnable"""
type SSOProviderEnablePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ssoProvider: SSOProvider!
}

"""Single sign-on provided by GitHub"""
type SSOProviderGitHubApp implements Node & SSOProvider {
  """The time when this SSO Provider was created"""
  createdAt: DateTime!

  """The user that created this SSO Provider"""
  createdBy: User!

  """The time when this SSO Provider was disabled"""
  disabledAt: DateTime

  """The user that disabled this SSO Provider"""
  disabledBy: User

  """The reason this SSO Provider was disabled"""
  disabledReason: String

  """
  An email domain whose addresses should be offered this SSO Provider during login.
  """
  emailDomain: String
  emailDomainVerificationAddress: String
  emailDomainVerifiedAt: DateTime

  """The time when this SSO Provider was enabled"""
  enabledAt: DateTime

  """The user that enabled this SSO Provider"""
  enabledBy: User

  """
  The name of the organization on GitHub that the user must be in for an SSO authorization to be verified
  """
  githubOrganizationName: String!
  id: ID!

  """
  An extra message that can be added the Authorization screen of an SSO Provider
  """
  note: String
  organization: Organization

  """
  How long a session should last before requring re-authorization. A `null` value indicates an infinite session.
  """
  sessionDurationInHours: Int

  """The current state of the SSO Provider"""
  state: SSOProviderStates!

  """
  Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated.
  """
  testAuthorizationRequired: Boolean

  """The type of SSO Provider"""
  type: SSOProviderTypes!

  """The authorization URL for this SSO Provider"""
  url: String!

  """The UUID for this SSO Provider"""
  uuid: ID!
}

"""Single sign-on provided by Google"""
type SSOProviderGoogleGSuite implements Node & SSOProvider {
  """The time when this SSO Provider was created"""
  createdAt: DateTime!

  """The user that created this SSO Provider"""
  createdBy: User!

  """The time when this SSO Provider was disabled"""
  disabledAt: DateTime

  """The user that disabled this SSO Provider"""
  disabledBy: User

  """The reason this SSO Provider was disabled"""
  disabledReason: String

  """
  Whether or not the hosted domain should be presented to the user during SSO
  """
  discloseGoogleHostedDomain: Boolean!

  """
  An email domain whose addresses should be offered this SSO Provider during login.
  """
  emailDomain: String
  emailDomainVerificationAddress: String
  emailDomainVerifiedAt: DateTime

  """The time when this SSO Provider was enabled"""
  enabledAt: DateTime

  """The user that enabled this SSO Provider"""
  enabledBy: User

  """The Google hosted domain that is required to be present in oAuth"""
  googleHostedDomain: String!
  id: ID!

  """
  An extra message that can be added the Authorization screen of an SSO Provider
  """
  note: String
  organization: Organization

  """
  How long a session should last before requring re-authorization. A `null` value indicates an infinite session.
  """
  sessionDurationInHours: Int

  """The current state of the SSO Provider"""
  state: SSOProviderStates!

  """
  Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated.
  """
  testAuthorizationRequired: Boolean

  """The type of SSO Provider"""
  type: SSOProviderTypes!

  """The authorization URL for this SSO Provider"""
  url: String!

  """The UUID for this SSO Provider"""
  uuid: ID!
}

"""Single sign-on provided via SAML"""
type SSOProviderSAML implements Node & SSOProvider {
  """The time when this SSO Provider was created"""
  createdAt: DateTime!

  """The user that created this SSO Provider"""
  createdBy: User!

  """
  The algorithim used to calculate the digest value during a SAML exchange
  """
  digestMethod: SSOProviderSAMLXMLSecurity!

  """The time when this SSO Provider was disabled"""
  disabledAt: DateTime

  """The user that disabled this SSO Provider"""
  disabledBy: User

  """The reason this SSO Provider was disabled"""
  disabledReason: String

  """
  An email domain whose addresses should be offered this SSO Provider during login.
  """
  emailDomain: String
  emailDomainVerificationAddress: String
  emailDomainVerifiedAt: DateTime

  """The time when this SSO Provider was enabled"""
  enabledAt: DateTime

  """The user that enabled this SSO Provider"""
  enabledBy: User
  id: ID!

  """Information about the IdP"""
  identityProvider: SSOProviderSAMLIdPType

  """
  An extra message that can be added the Authorization screen of an SSO Provider
  """
  note: String
  organization: Organization
  serviceProvider: SSOProviderSAMLSPType!

  """
  How long a session should last before requring re-authorization. A `null` value indicates an infinite session.
  """
  sessionDurationInHours: Int

  """
  The algorithim used to calculate the signature value during a SAML exchange
  """
  signatureMethod: SSOProviderSAMLRSAXMLSecurity!

  """The current state of the SSO Provider"""
  state: SSOProviderStates!

  """
  Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated.
  """
  testAuthorizationRequired: Boolean

  """The type of SSO Provider"""
  type: SSOProviderTypes!

  """The authorization URL for this SSO Provider"""
  url: String!

  """The UUID for this SSO Provider"""
  uuid: ID!
}

input SSOProviderSAMLIdP {
  issuer: String
  ssoURL: String
  certificate: String
  metadata: SSOProviderSAMLIdPMetadata
}

input SSOProviderSAMLIdPMetadata {
  xml: XML
  url: String
}

"""Information about the IdP for a SAML SSO Provider"""
type SSOProviderSAMLIdPType {
  """The certificated provided by the IdP"""
  certificate: String

  """The IdP Issuer value for this SSO Provider"""
  issuer: String

  """The metadata used to configure this SSO provider if it was provided"""
  metadata: SSOProviderSAMLMetadataType

  """
  The name of the IdP Service. Returns nil if no name can be guessed from the SSO URL
  """
  name: String

  """The Idp SSO URL for this SSO Provider"""
  ssoURL: String
}

"""SAML metadata used for configuration"""
type SSOProviderSAMLMetadataType {
  """The URL that this metadata can be publically accessed at"""
  url: String

  """The XML for this metadata"""
  xml: XML
}

"""XML RSA security algorithims used in the SAML exchange"""
enum SSOProviderSAMLRSAXMLSecurity {
  """http://www.w3.org/2000/09/xmldsig#rsa-sha1"""
  RSA_SHA1

  """http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"""
  RSA_SHA256

  """http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"""
  RSA_SHA384

  """http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"""
  RSA_SHA512
}

"""Information about Buildkite as a SAML Service Provider"""
type SSOProviderSAMLSPType {
  """The IdP Issuer value for this SSO Provider"""
  issuer: String

  """The metadata used to configure this SSO provider if it was provided"""
  metadata: SSOProviderSAMLMetadataType

  """The Idp SSO URL for this SSO Provider"""
  ssoURL: String
}

"""XML security algorithims used in the SAML exchange"""
enum SSOProviderSAMLXMLSecurity {
  """http://www.w3.org/2000/09/xmldsig#sha1"""
  SHA1

  """http://www.w3.org/2001/04/xmlenc#sha256"""
  SHA256

  """http://www.w3.org/2001/04/xmldsig-more#sha384"""
  SHA384

  """http://www.w3.org/2001/04/xmlenc#sha512"""
  SHA512
}

"""All the possible states an SSO Provider can be in"""
enum SSOProviderStates {
  """
  The SSO Provider has been created, but has not been enabled for use yet
  """
  CREATED

  """The SSO Provider has been setup correctly and can be used by users"""
  ENABLED

  """The SSO Provider has been disabled and can't be used directly"""
  DISABLED
}

"""All the possible SSO Provider types"""
enum SSOProviderTypes {
  """An SSO Provider configured to use SAML"""
  SAML

  """A SSO Provider configured to use Google GSuite for authorization"""
  GOOGLE_GSUITE

  """A SSO Provider configured to use a GitHub App for authorization"""
  GITHUB_APP
}

"""Autogenerated input type of SSOProviderUpdate"""
input SSOProviderUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  note: String
  sessionDurationInHours: Int
  emailDomain: String
  emailDomainVerificationAddress: String
  identityProvider: SSOProviderSAMLIdP
  digestMethod: SSOProviderSAMLXMLSecurity
  signatureMethod: SSOProviderSAMLRSAXMLSecurity
  githubOrganizationName: String
  googleHostedDomain: String
  discloseGoogleHostedDomain: Boolean
}

"""Autogenerated return type of SSOProviderUpdate"""
type SSOProviderUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  ssoProvider: SSOProvider!
}

"""An organization team"""
type Team implements Node {
  """The time when this team was created"""
  createdAt: DateTime!

  """The user that created this team"""
  createdBy: User

  """New organization members will be granted this role on this team"""
  defaultMemberRole: TeamMemberRole!

  """A description of the team"""
  description: String
  id: ID!

  """Add new organization members to this team by default"""
  isDefaultTeam: Boolean!

  """Users that are part of this team"""
  members(
    first: Int
    after: String
    last: Int
    before: String

    """Search team members named like the given query case insensitively"""
    search: String

    """Search team members by their role"""
    role: [TeamMemberRole!]

    """Order the members returned"""
    order: TeamMemberOrder = RECENTLY_CREATED
  ): TeamMemberConnection

  """The name of the team"""
  name: String!

  """The organization that this team is a part of"""
  organization: Organization
  permissions: TeamPermissions

  """Pipelines associated with this team"""
  pipelines(
    first: Int
    after: String
    last: Int
    before: String

    """Search pipelines named like the given query case insensitively"""
    search: String

    """Order the pipelines returned"""
    order: TeamPipelineOrder = RECENTLY_CREATED
  ): TeamPipelineConnection

  """The privacy setting for this team"""
  privacy: TeamPrivacy!

  """The slug of the team"""
  slug: String!

  """The public UUID for this team"""
  uuid: ID!
}

type TeamConnection implements Connection {
  count: Int!
  edges: [TeamEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of TeamCreate"""
input TeamCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organizationID: ID!
  name: String!
  description: String

  """The privacy setting for this team"""
  privacy: TeamPrivacy!

  """Add new organization members to this team by default"""
  isDefaultTeam: Boolean!

  """New organization members will be granted this role on this team"""
  defaultMemberRole: TeamMemberRole!
}

"""Autogenerated return type of TeamCreate"""
type TeamCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  organization: Organization!
  teamEdge: TeamEdge!
}

"""Autogenerated input type of TeamDelete"""
input TeamDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of TeamDelete"""
type TeamDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedTeamID: ID!
  organization: Organization!
}

type TeamEdge {
  cursor: String!
  node: Team
}

"""An member of a team"""
type TeamMember implements Node {
  """The time when the team member was added"""
  createdAt: DateTime!

  """The user that added this team member"""
  createdBy: User
  id: ID!

  """The organization member associated with this team member"""
  organizationMember: OrganizationMember
  permissions: TeamMemberPermissions

  """The users role within the team"""
  role: TeamMemberRole!

  """The team associated with this team member"""
  team: Team

  """The user associated with this team member"""
  user: User

  """The public UUID for this team member"""
  uuid: ID!
}

type TeamMemberConnection implements Connection {
  count: Int!
  edges: [TeamMemberEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of TeamMemberCreate"""
input TeamMemberCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  teamID: ID!
  userID: ID!
}

"""Autogenerated return type of TeamMemberCreate"""
type TeamMemberCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  team: Team
  teamMemberEdge: TeamMemberEdge
}

"""Autogenerated input type of TeamMemberDelete"""
input TeamMemberDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of TeamMemberDelete"""
type TeamMemberDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedTeamMemberID: ID!
  team: Team
}

type TeamMemberEdge {
  cursor: String!
  node: TeamMember
}

"""The diferent orders you can sort team members by"""
enum TeamMemberOrder {
  """Order by name alphabetically"""
  NAME

  """Order by most relevant results when doing a search"""
  RELEVANCE

  """Order by the most recently added members first"""
  RECENTLY_CREATED
}

"""
Permissions information about what actions the current user can do against the team membership record
"""
type TeamMemberPermissions {
  """Whether the user can delete the user from the team"""
  teamMemberDelete: Permission

  """Whether the user can update the team's members admin status"""
  teamMemberUpdate: Permission
}

"""The roles a user can be within a team"""
enum TeamMemberRole {
  """The user is a regular member of the team"""
  MEMBER

  """The user can manage pipelines and users within the team"""
  MAINTAINER
}

"""Autogenerated input type of TeamMemberUpdate"""
input TeamMemberUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  role: TeamMemberRole!
}

"""Autogenerated return type of TeamMemberUpdate"""
type TeamMemberUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  teamMember: TeamMember!
}

"""The diferent orders you can sort teams by"""
enum TeamOrder {
  """Order by name alphabetically"""
  NAME

  """Order by the most recently created teams first"""
  RECENTLY_CREATED

  """Order by relevance when searching for teams"""
  RELEVANCE
}

"""
Permissions information about what actions the current user can do against the team
"""
type TeamPermissions {
  """Whether the user can see the pipelines within the team"""
  pipelineView: Permission

  """Whether the user can delete the team"""
  teamDelete: Permission

  """
  Whether the user can administer add members from the organization to this team
  """
  teamMemberCreate: Permission

  """Whether the user can add pipelines from other teams to this one"""
  teamPipelineCreate: Permission

  """Whether the user can update the team's name and description"""
  teamUpdate: Permission
}

"""An pipeline that's been assigned to a team"""
type TeamPipeline implements Node {
  """The access level users have to this pipeline"""
  accessLevel: PipelineAccessLevels!

  """The time when the pipeline was added"""
  createdAt: DateTime!

  """The user that added this pipeline to the team"""
  createdBy: User
  id: ID!
  permissions: TeamPipelinePermissions

  """The pipeline associated with this team member"""
  pipeline: Pipeline

  """The team associated with this team member"""
  team: Team

  """The public UUID for this team member"""
  uuid: ID!
}

"""A collection of TeamPipeline records"""
type TeamPipelineConnection implements Connection {
  count: Int!
  edges: [TeamPipelineEdge]
  pageInfo: PageInfo
}

"""Autogenerated input type of TeamPipelineCreate"""
input TeamPipelineCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  teamID: ID!
  pipelineID: ID!
}

"""Autogenerated return type of TeamPipelineCreate"""
type TeamPipelineCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  pipeline: Pipeline
  team: Team
  teamPipelineEdge: TeamPipelineEdge
}

"""Autogenerated input type of TeamPipelineDelete"""
input TeamPipelineDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  force: Boolean
}

"""Autogenerated return type of TeamPipelineDelete"""
type TeamPipelineDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  deletedTeamPipelineID: ID!
  team: Team
}

type TeamPipelineEdge {
  cursor: String!
  node: TeamPipeline
}

"""The diferent orders you can sort pipelines by"""
enum TeamPipelineOrder {
  """Order by name alphabetically"""
  NAME

  """Order by most relevant results when doing a search"""
  RELEVANCE

  """Order by the most recently added pipelines first"""
  RECENTLY_CREATED
}

"""
Permission information about what actions the current user can do against the team pipelines
"""
type TeamPipelinePermissions {
  """Whether the user can delete the pipeline from the team"""
  teamPipelineDelete: Permission

  """Whether the user can update the pipeline connection to the team"""
  teamPipelineUpdate: Permission
}

"""Autogenerated input type of TeamPipelineUpdate"""
input TeamPipelineUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  accessLevel: PipelineAccessLevels!
}

"""Autogenerated return type of TeamPipelineUpdate"""
type TeamPipelineUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  teamPipeline: TeamPipeline!
}

"""Whether a team is visible or secret within an organization"""
enum TeamPrivacy {
  """Visible to all members of the organization"""
  VISIBLE

  """Visible to organization administrators and members"""
  SECRET
}

"""
A Team identifier using a slug, and optionally negated with a leading `!`
"""
scalar TeamSelector

"""Autogenerated input type of TeamUpdate"""
input TeamUpdateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
  name: String!
  description: String

  """The privacy setting for this team"""
  privacy: TeamPrivacy

  """Add new organization members to this team by default"""
  isDefaultTeam: Boolean!

  """New organization members will be granted this role on this team"""
  defaultMemberRole: TeamMemberRole!
}

"""Autogenerated return type of TeamUpdate"""
type TeamUpdatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  team: Team!
}

"""A TOTP configuration"""
type TOTP {
  id: ID!

  """The recovery code batch associated with this TOTP configuration"""
  recoveryCodes: RecoveryCodeBatch!

  """Whether the TOTP configuration has been verified yet"""
  verified: Boolean!
}

"""Autogenerated input type of TOTPActivate"""
input TOTPActivateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!

  """The current one-time password associated with this TOTP configuration."""
  token: String!
}

"""Autogenerated return type of TOTPActivate"""
type TOTPActivatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  totp: TOTP!
  viewer: Viewer!
}

"""Autogenerated input type of TOTPCreate"""
input TOTPCreateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
}

"""Autogenerated return type of TOTPCreate"""
type TOTPCreatePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """
  The URI to enter into your one-time password generator. Usually presented to the user as a QR Code
  """
  provisioningUri: String!
  totp: TOTP!
}

"""Autogenerated input type of TOTPDelete"""
input TOTPDeleteInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  id: ID!
}

"""Autogenerated return type of TOTPDelete"""
type TOTPDeletePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  viewer: Viewer!
}

"""Autogenerated input type of TOTPRecoveryCodesRegenerate"""
input TOTPRecoveryCodesRegenerateInput {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String

  """The ID of the TOTP to generate the Recovery Codes for"""
  totpId: ID!
}

"""Autogenerated return type of TOTPRecoveryCodesRegenerate"""
type TOTPRecoveryCodesRegeneratePayload {
  """A unique identifier for the client performing the mutation."""
  clientMutationId: String
  recoveryCodes: RecoveryCodeBatch!
  totp: TOTP!
}

"""A person who hasn’t signed up to Buildkite"""
type UnregisteredUser {
  avatar: Avatar!

  """The email for the user"""
  email: String

  """The name of the user"""
  name: String
}

"""A user"""
type User implements Node {
  avatar: Avatar!

  """If this user account is a bot managed by Buildkite"""
  bot: Boolean!

  """Returns builds that this user has created."""
  builds(first: Int, last: Int, state: [BuildStates!], branch: [String!], metaData: [String!]): BuildConnection

  """The primary email for the user"""
  email: String!

  """Does the user have a password set"""
  hasPassword: Boolean!
  id: ID!

  """The name of the user"""
  name: String!

  """The public UUID of the user"""
  uuid: String!
}

"""
A User identifier using a UUID, and optionally negated with a leading `!`
"""
scalar UserSelector

"""Represents the current user session"""
type Viewer implements Node {
  """
  Returns the user's API access tokens.
  
  These are currently private and cannot be accessed via the public GraphQL API.
  
  """
  apiAccessTokens(
    first: Int
    last: Int

    """Filter tokens by their template"""
    template: [APIAccessTokenTemplates!]

    """
    Filter tokens by organizations they provide access to. Organizations are specified by their slug
    """
    organizations: [ID!]
  ): APIAccessTokenConnection
  authorizations(
    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """Returns the last _n_ elements from the list."""
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
    type: [AuthorizationType!]
  ): AuthorizationConnection
  builds(first: Int, last: Int, state: BuildStates, branch: String, metaData: [String!]): BuildConnection
  changelogs(first: Int, last: Int, read: Boolean): ChangelogConnection

  """Emails associated with the current user"""
  emails(first: Int, last: Int, verified: Boolean): EmailConnection

  """The ID of the current user"""
  id: ID!
  jobs(
    first: Int
    after: String
    last: Int
    before: String
    type: [JobTypes!]
    state: [JobStates!]
    agentQueryRules: [String!]

    """Order the jobs"""
    order: JobOrder = RECENTLY_CREATED
  ): JobConnection
  notice(namespace: NoticeNamespaces!, scope: String!): Notice
  organizations(first: Int, last: Int): OrganizationConnection

  """
  The user's active TOTP configuration, if any.
  
  This field is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
  
  """
  totp(id: ID): TOTP

  """The current user"""
  user: User
}

"""A blob of XML represented as a pretty formatted string"""
scalar XML

"""A blob of YAML"""
scalar YAML

